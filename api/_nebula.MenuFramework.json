{"readme":"# MenuFramework\n\n## How to use in your mod :\nCreate a file called IMenuAPI in your mod, and copy in these contents :\n```cs\nusing System;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic interface IMenuAPI\n{\n\tGameObject TitleScreen_MakeMenuOpenButton(string name, int index, Menu menuToOpen);\n\tGameObject TitleScreen_MakeSceneLoadButton(string name, int index, SubmitActionLoadScene.LoadableScenes sceneToLoad, PopupMenu confirmPopup = null);\n\tButton TitleScreen_MakeSimpleButton(string name, int index);\n\tGameObject PauseMenu_MakeMenuOpenButton(string name, Menu menuToOpen, Menu customMenu = null);\n\tGameObject PauseMenu_MakeSceneLoadButton(string name, SubmitActionLoadScene.LoadableScenes sceneToLoad, PopupMenu confirmPopup = null, Menu customMenu = null);\n\tButton PauseMenu_MakeSimpleButton(string name, Menu customMenu = null);\n\tMenu PauseMenu_MakePauseListMenu(string title);\n\tPopupMenu MakeTwoChoicePopup(string message, string confirmText, string cancelText);\n\tPopupInputMenu MakeInputFieldPopup(string message, string placeholderMessage, string confirmText, string cancelText);\n\tPopupMenu MakeInfoPopup(string message, string continueButtonText);\n\tvoid RegisterStartupPopup(string message);\n}\n```\nThen, get the API reference by doing `ModHelper.Interaction.TryGetModApi<IMenuAPI>(\"_nebula.MenuFramework\");`\n\n## Documentation\n\n### Title screen only :\n\n#### TitleScreen_MakeMenuOpenButton\nCreates a button on the title screen with index `index` and text `name`, which opens the menu `menuToOpen`.\n\n#### TitleScreen_MakeSceneLoadButton\nCreates a button on the title screen with index `index` and text `name`, which loads the scene `sceneToLoad`.\nWhen the optional parameter `confirmPopup` is given, the button will first open this popup menu. If confirm is selected, the scene will load.\n\n#### TitleScreen_MakeSimpleButton\nCreates a button on the title screen with index `index` and text `name`. You can then do whatever you like with the button by doing `(button).onClick.AddListener( ... )`.\n\n### Pause menu only :\n\nFor the pause menu methods, `customMenu` is the menu where the button will appear. If not given, the button will appear in the normal pause menu.\nThis is so you can create your own custom sub-lists in the pause menu.\nFirst create a sub-menu with `PauseMenu_MakePauseListMenu`, then create a button that opens that menu. Then add buttons to that sub-menu by giving the created menu as the `customMenu` parameter.\n\n#### PauseMenu_MakeMenuOpenButton\nSame as title screen version.\n\n#### PauseMenu_MakeSceneLoadButton\nSame as title screen version.\n\n#### PauseMenu_MakeSimpleButton\nSame as title screen version.\n\n#### PauseMenu_MakePauseListMenu\nMakes a sub-menu for the pause menu, with the name of `title`.\n\n### General menu stuff :\n\n#### MakeTwoChoicePopup\nMakes a popup with a message and two button choices, typically YES/NO or CONFIRM/CANCEL. `message` is the main message of the popup, `confirmText` and `cancelText` are what appears on the two buttons.\n\n#### MakeInputFieldPopup\nMakes a popup with a message, a text input field, and two button choices. Same parameters as `MakeTwoChoicePopup`, with the addition of `placeholderText` as what appears in the background of the input box before you begin typing.\n\n#### MakeInfoPopup\nMakes a popup with a message and only one button to close the popup. `message` is the main message of the popup, `continueButtonText` is what appears on the button - usually just \"OK\".\n\n#### RegisterStartupPopup\nRegisters a message that you want to appear when the game loads. **This must be run in `Start()`!**\n\n","externalImages":{}}